DIO BOOTCAMP

TEÓRICO

PILARES DA RESOLUÇÃO DE PROBLEMAS 

decomposição: 
    analise (separa o problema em problemas menores); sintese ( separa em problemas menores e o reconstrói de um jeito de sentido a solução. engloba a analise, que é a primeira fase)
    separa o problema → executa cada etapa → junta tudo.

padrões

abstração: 
    generalizar o problema de tal modo que posssa ser usado em diferentes cenarios.

algoritimos

desenvolvimento de um programa: analise e definição de dados de entrada e saida → descrever o problema por narrativas, fluxograma ou pseudocodigo → codificar em uma linguagem escolhida.

PROGRAMAÇÃO ORIENTADA A OBJETOS

objeto: 
    tem caracteristicas (o que tenho) - atributos, comportamentos (o que posso fazer) - métodos e estado (como faço);

classificação: 
    engloba o objeto descrito acima.

POO - tem variáveis ( caracteristicas, comportamentos e estado) associados a um objeto e essencialmente uma classe.
    pode ter classes dentro da classe principal. vantagens ( reuso de código = para a classe filha, mesmo que sobrescreva a classe mão, tambem reutiliza os codigos da classe mãe).

GIT E GITHUB
    VERSIONAMENTO NO GIT

arquivo md = mark down - o começo, um arquivo de instrução.

Passo a passo no git bash:
ja dentro da pasta..
    1- git init 
        (é aberto um repositório vazio GIT na sua pasta).
    2- git add *arquivo que sera mandado p area de staging* 
        (para add todos os arquivos da pasta usa 'git add . '
    3- git commit -m “primeiro commit” *será o nome do seu primeiro commit* 
        (-m = mensagem do commit)

atualização de versões (novos commits)

    1 - git commit -m “descrição/ mensagem do novo commit” 
        ( primeiro comando com titulo de atualização)
    2- git push origin NOME DA BRANCH 

Branch: ramificação do projeto. usado para add nova paginao ao projeto. (tipo area de trabalho);
não necessariamente pode ser para novos arquivos pode se para novas versões (alterações).

para criar uma nova:
    1- git checkout -b “nova-branch” 
        (ja sai da branch anterior e cria uma nova e entra nela )
    2- git commit -m “nova-branch” 
        (p trocar de branch)
    3 - git push origin 
        (fazer o upload das novas atualizações ou arquivos.)

 ** git checkout “nome da branch” ( p trocar de branch)
** git checkout “nome da branch” p voltar p branch anterior.
**  git merge “nome da nova branch” ( p as duas branchs terem os mesmos arquivos);

download dos arquivos do github p seu pc:

    1- cria uma nova pasta
    2- abre o bash e da o comando git clone LINK DA PASTA QUE QUER CLONAR
    p atualizar a versão que clonou:  entra na pasta baixada → git puul ( o arquivo é atualizado automaticamente);

TERMOS COMUNS
    ALT: texto alternativo (texto que aparece quando descansa o mouse em algo)
    API: funcionalidade colocada no site para executar outras funções especificas ex caixa de login do facebook.
    BREACKPOINTS: pontos chave da tela ou debug
    CACHE: dados guardados no computador para acerelar o carregamento de páginas
    COOCKIES: rastros deixados por sintese
    DNS: tradutor nome para IP/ IP para nome
    DPI: proporção de pontos na tela (quanto mais pontos, maior a resolução)
    FRAMEWORK: ferramentas para construção de softwares

HTML5 TEÓRICO

    <h1 class="">Titulo</h1>

        tag de abertura - atributo - conteúdo - fecha tag
    
    elementos: <section></section>: seção generica da pagina (ex lista de artigos)
                <header></header>: cabealho de pagina ou section 
                <article></article>: conteudo relevante da pagina
                <aside></aside>: conteudo relacionado ao conteudo principal
                <footer></footer>: rodapé da pagina ou de alguma section
                <h1 até h6></h1>: titulos (somente 1 h1 por pag)
                <p></p>: paragrafo (textos, artigos ou videos)
                <a></a>: uma ancora que aponta para emails ou links (target=_blank = abrir o link em uma nova aba)
                <img>: src para o link da fonte e alt="descrição da foto" caso a imagem nao seja carregada ela mostra a descrição.
                <ul></ul>: lista onde a ordem dos itens nao é importante <ol></ol>: importantes 
                    <li></li> item da lista

CSS3 TEÓRICO
    
    a, p, h1 {
        color: ;
    }
        seletores {
            declarações
        }
    
    elementos: id são chamados pelo "#" e classes por "."
                de fora para o centro -->
                    margem - border (pode ser alterado a cor e largura/ solid, dotted e dashed) - padding - conteudo
                *border-radius: pose ser alterado cada ponta de um jeito.
                list-style-type: tipo no icone que vai antes dos itens da lista/ padding e margin padrão são add a listas automaticamente
FLEX BOX 

FLEX CONTAINER 
    inicializa o container e agrupa os elementos filhos (itens) transforma eles respeitando o tamanho do seu conteudo
            
        display: flex (transformar os itens em flex) 
            display: inicializador
            flex-direction: direcionar os itens (em linha e coluna)
                row:sentido da esq para direita / row-reverse: da dir p esq / column: de cima p baixo / column-reverse: o oposto
            flex-wrap: define ou não a quebra de linha (quando o container não comporta mais os itens) - wrap- reverse da esquerda p direita
            flex-flow: abreviação direct e wrap
            justify-content (sem dana = linha/ column = coluna): alinha os itens de acordo com o espaço interno ao lingo do eixo principal row (horizontal) ou column (vertical) 
                (VARIAÇÕES: FLEX-START/END - SPACE-BETWEEN (espaço igual sem margem em volta do conjunto = inicio e fim colados no container)/AROUND (espaço envolta de todos os itens dentro do conjunto) )
            align-items: alinhar itens de acordo com o eixo do container (center, strech (deixa todos os itens do mesmo tamanho), flex-start/end (itens vao começar acima/ abaixo)).
            align-content: alinhar as linhas do container de acordo com o eixo vertical
        
        NA PRATICA: no html uma ul com li's -->css: 1- .flex-container {} 
                                                    2- .flex-item{} 
                                                    3- .row-reverse {flex-direction: row-reverse;} (a orientação escolhida *que estara na classe da li*) 
                                                    4- .row-reverse li {} (chamando a li)

    FLEX ITEM PROPRIEDADES RELACIONADAS (para os filhos dos itens)
        
        flex-grow: fator de crescimento (não funciona com o justify-content ativado)
            NA PRATICA: no html: <div class="item fg-1, 2 ou 3...(tamanho do crescimento do item dentro do container)">CONTEUDO</div>
        flex-basis: tamanho minino do item antes da distribuiçao dentro do container vai crescer de acordo com o conteudo.
        flex-shrink: capacidade de redução ou em 0 que não reduz.
            NA PRATICA: no html: <div class="item s-1 (quantas vezes vai diminuir) fg-1">CONTEUDO</div>
        Flex: grow, shrink e basis automaticamente são de valor, 1, 0 e auto respectivamente. para colunas usar flex-direction: column;
        oreder: ordem dos itens 
        order:ordem de distribuição
        align-self: alinhamento de item especifico em relação ao eico do container
        
            NA PRATICA: <div class="item o1, 2 ou 3..." (dizendo a ordem em linha dos itens)>CONTEUDO</div>
        align-self: alinha cada item sozinho (só funciona se o container nao tiver um align-items ativado)
